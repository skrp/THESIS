####################################################
# MKRX UNIX NETWORK

                                             ~ skrp
                                       Kehkay Genkai
                                      of the village
                                  Hidden in the 1337
{{  t_(o0)_j  }}
\\ Meri Kann //
_\\cibR punX//______________________________________
|
|
|
|
|
|
|
This manuscript details the machine of MKRX UNIX NETWORKS
This system connects nodes thru encrypted tunnels

SICC network file system
MKRX archive tools
HIVE work processors

KERN hardened FreeBSD_10.3 custom unix kernels
PSK-OPIE privilege partition & escalation

PROTO unix network protocol implementations
STAT node & network dtrace sensor analysis

ZFS diagrams PCI, SATA, SAS, USB
Schematics & Utilities

MAN manuals of instructions & examples
|
|
|
|
|
|
|
Let us preserve all insight
Till the last man walk

That he might not walk
In the darkness of past

Independent of time
Independent of wealth
Independent of government

In the order of Anarchy
In that way deliver basic rights

Files get lost
Storage gets easier
|
|
|
|
|
|
|
####################################################
# Table of Contents
####################################################

# 0 ################################################
SICC
  Standard

# 1 ################################################
MKRX
  Tools explained
  Tool use & examples
    create GET from BKUP
    create GET from UNIQ
    populate a new drive
    extract a source

# 2 ################################################
HIVE
  Structure
  Mechanics
    ORDER
    SLEEP
    SUICIDE
    CLEAN
    RESUME
  API
    SHA
    GET
    UNTAR
    REGX
    BLKR
  Logs

# 3 ################################################
KERN
  Hardened
  PSK-OPIE
  RINGS (rings of power)
  USR
    root
    sroot
    lord
    heir
    seer
    norm

# 4 ################################################
PSK-OPIE
  Review
  ASIGN
  Mine
    KEY
    RAW

# 5 ################################################
PROTO
  Overview
  SSH
  SCP
  FTP
  PF
  NFS
  IRC
  8080
  HTTPS
  MORSE

# 6 ################################################
STAT
  List
  dtrace
    cpu
    PID
    fs
    net
  Performance
    LOG
    ECHO
  ANAL
    SELF
    NET

# 7 ################################################
ZFS & Hardware
  ZFS
    0
    Mirror
    raidz2
    raidz3
  Hardware
    BOX
    BIOS
    cpu
    RAM
    PCI
    DEV
    Supply
    PCI
    SATA
    SAS
    USB
    JBOD

# 8 ################################################
SCHMATIC
  SIMP
  TOWR
  Utilities

# 9 ################################################
MAN
  unix manuals
    log
    mount
    boot
    ntfs
  perl manuals
    log
    language
    modules
  zfs manuals
    log
    hotswap
    import
    set
  dtrace manuals
    language

# END ##############################################
|
|
|
|
|
|
|
####################################################
# 0 - SICC
####################################################

{#} System In Complete Chaos
{###} The core of this system is based on the sha-algorithm which produces unique data identifiers
{###} Each file is named after its mathematically-based unique identifier
{###} This de-duplicates & assigns data into Chaos order
{###} Metadata is securely kept seperate from the data
{###} This isolation allows for open obfuscation of data
{###} All data files are kept in one location in alphanumeric order of a 64 hexadecimal identifier
{###} Data is stored in an ultra-transient method for simple network archive management

{#} Standard metadata file entries:
{##} name - MKRX XS standardized name
{##} path - MKRX XS standardized path of extraction
{##} size - number of bytes
{##} encode - type of encoding

{#} KEY is a recipe to rebuild an obfuscated file
{##} KEY file is named after the original file sha
{##} Hexidecimal sequental list of sha that produce the file

{#} SLICR & BLKR further deepens the obfuscation to unprecedented levels
{##} SLICR
{###} Shreds a file into random-sized parts & creates KEY
{##} BLKR
{###} Blocks file into standard-size parts that produce associative compression & creates KEY
{###} Homogeneous data types will have duplicate collisions discovered in the sha which will overwrite the previous file that is an exact copy
{###} The smaller [per-NODE] block-size the greater power of compression & obfuscation

{#} NOTE
{##} All file entries are located in the /usr/nfs/pub/ directory
{##} This will store|share|backup|recieve as a network
{##} Network level deduplication of data
{##} Sane & Clean orders of massive data on an archive network
{##} All data easily accounted for in simple-single-entry lists
|
|
|
|
|
|
|
####################################################
# 1 - MKRX
####################################################

{#} Tool summary

{####} SCRUB
{########} Verify sha of the data is true
{########} Report untrue data

{####} CHKMETA
{########} Confirm each file has metadata
{########} Report rogue data

{####} UNIQ
{########} Check if data is unique to the network
{########} Compare NODE data against NET data
{########} Create add backup duplicates to network

{####} XFR
{########} Get data onto local drive

{####} INDEX
{########} Update metadata database hash dumps

{####} CLI
{########} Load INDEX into memory
{########} Terminal Input & Output to produce single entry lists

{####} API
{########} RESET - reset array to full network-array
{########} LOAD - load array from custom file
{########} PRINT - output current array
{########} COUNT - count array
{########} VAL - output values of array 'name, path, size, encoding'
{########} POP - output size specific lists to fill up the specific amount of bytes

{####} Use & example
{########} create GET for backup
+$usr@host> UNIQ TOTAL_NET TOTAL_LOCAL GET
+TOTAL_NET - location of network-wide file list
+TOTAL_LOCAL - location of local file list
+GET - will now have line-per-entry list of what TOTAL_LOCAL lacks from TOTAL_NET

{########} create EXTRACT from UNIQ
+$usr@host> UNIQ TOTAL_SOURCE TOTAL_NET EXTRACT
+TOTAL_SOURCE - sha lists of a source
+TOTAL_NET - network-wide file list
+EXTRACT - new files to append to network-wide list

{########} populate a new drive
+$usr@host> CLI ~/INDEX/
+~/INDEX/ - location of INDEX metadata database hash dumps
+
+pop 1000000000
+exit
+
+$usr@host> cd ~/POP/
+
+$usr@host> wc -l 1000000000
+8493719 1000000000
+
+$usr@host> wc -l leftover_1000000000
+39533365846 leftover_1000000000
+
+$usr@host> XFR ~/POP/1000000000 /mnt/USB/pool/
+~/POP/1000000000 - file to transfer
+/mnt/USB/pool/ - location to dump files
+
+$usr@host> CLI ~/INDEX/
+
+load leftover_1000000000
+
+pop 1000000000
+exit
+
+{########} loop over & over by gigabyte sized fragements

{########} extract a source
+$usr@host> XS /mnt/bkup10/ ~/
+/mnt/bkup10/ - location to grab new data
+~/ - location to dump data into ~/pool/ & ~/g/
|
|
|
|
|
|
|
####################################################
# 2 - HIVE
####################################################

{####} HIVE
{########} DEMON - always online unix daemon goons with network API

{####} NODE Structure
{########} /tmp/$NAME/dump/ - DEMON specific host dump
{########} /tmp/PING - host DEMON roster

{####} NET Structure
{########} /HIVE/ - nfs remote mount
{########} /HIVE/PING - net DEMON roster
{########} /HIVE/node/$NODE - node specific directory
{########} /HIVE/node/$NODE/PID - node specific PID rooster
{########} /HIVE/node/$NODE/QUE/ - host specific API que
{########} /HIVE/cemetery/ - network wide DEMON graveyard
{########} /HIVE/cemetery/RAW_$NAME -
{########} /HIVE/cemetery/DONE_$NAME -
{########} /HIVE/cemetery/TODO_$NAME -

{####} Dump
{########} /$nfs_pool/ - remote que file dump
{########} /$nfs_g/ - remote que meta dump

{####} Mechanics
{########} ORDER
{########} SLEEP
{########} SUICIDE
{########} CLEAN
{########} RESUME

{####} API
{########} SHA - sha a file
{########} GET - http request URL & XS file into remote dump
{########} UNTAR - extract file archive type & XS into remote dump
{########} REGX - test massive-data for patterns
{########} BLKR - shred files into standard-blocks
{########} SLICR - shred files into random-blocks

{####} Logs
{########}
{########}
|
|
|
|
|
|
|
####################################################
# 3 - KERN
####################################################
|
|
|
|
|
|
|
####################################################
# 4 - PSKOPIE
####################################################
|
|
|
|
|
|
|
####################################################
# 5 - PROTO
####################################################
|
|
|
|
|
|
|
####################################################
# 6 - STAT
####################################################
|
|
|
|
|
|
|
####################################################
# 7 - ZFS & Hardware
####################################################
|
|
|
|
|
|
|
####################################################
# 8 - Schematics
####################################################
|
|
|
|
|
|
|
####################################################
# 9 - MAN
####################################################
|
|
|
|
|
|
|
